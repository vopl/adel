#include "pch.hpp"
#include "net/channel.hpp"
#include "net/impl/channel.hpp"

namespace net
{
	//////////////////////////////////////////////////////////////////////////
	Channel::Channel()
	{
	}

	//////////////////////////////////////////////////////////////////////////
	Channel::~Channel()
	{
	}

	//////////////////////////////////////////////////////////////////////////
	bool Channel::isOpen() const
	{
		return _impl->isOpen();
	}

	//////////////////////////////////////////////////////////////////////////
	boost::signals2::connection Channel::connectOnReceive(const TOnReceive &f)
	{
		return _impl->connectOnReceive(f);
	}

	//////////////////////////////////////////////////////////////////////////
	void Channel::listen(size_t amount)
	{
		return _impl->listen(amount);
	}

	//////////////////////////////////////////////////////////////////////////
	async::Future2<boost::system::error_code, Packet> Channel::receive(size_t maxSize)
	{
		return _impl->receive(maxSize);
	}

	//////////////////////////////////////////////////////////////////////////
	async::Future<boost::system::error_code> Channel::send(const Packet &p)
	{
		return _impl->send(p);
	}

	//////////////////////////////////////////////////////////////////////////
	async::Future<boost::system::error_code> Channel::send(
		const std::vector<std::pair<const char *, size_t> > &buffers,
		const std::vector<Packet> &packets4keep)
	{
		return _impl->send(buffers, packets4keep);
	}

	//////////////////////////////////////////////////////////////////////////
	void Channel::close()
	{
		return _impl->close();
	}

	//////////////////////////////////////////////////////////////////////////
	size_t Channel::getTimeout()
	{
		return _impl->getTimeout();
	}

	//////////////////////////////////////////////////////////////////////////
	void Channel::setTimeout(size_t ms)
	{
		return _impl->setTimeout(ms);
	}

}
